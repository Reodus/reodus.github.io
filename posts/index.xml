<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Reodus</title>
    <link>https://reodus.com/posts/</link>
    <description>Recent content in Posts on Reodus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://reodus.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fuzzer Internals - Part 3: Generation-Based Fuzzers (Dumb Fuzzer)</title>
      <link>https://reodus.com/posts/fuzzer-internals-part3/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://reodus.com/posts/fuzzer-internals-part3/</guid>
      
      <description>Now, I guess we are ready to make our hands dirty by writing a simple fuzzer. I start with Generation Based Fuzzers. As we discussed in Part 1, generation-based fuzzers are a kind of fuzzers that generate input from scratch. As I mentioned befre, they can be divided into two categories: smart fuzzers and dumb fuzzers. Smart fuzzers recognize the input structure, but dumb fuzzers don&amp;rsquo;t.
Dumb Generation-Based Fuzzers In this part, I use C++ language to create a simple dumb generation-based fuzzer but basically, the concepts are the same so you can choose your own programming language to continue the tutorial.</description>
      
    </item>
    
    <item>
      <title>Fuzzer Internals - Part 2: Software Vulnerability Fundamentals</title>
      <link>https://reodus.com/posts/fuzzer-internals-part2/</link>
      <pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://reodus.com/posts/fuzzer-internals-part2/</guid>
      
      <description>Before getting into fuzzer internals, itâ€™s necessary to understand the minimum concept of vulnerabilities and anything related to them. In this part, the fundamental concept is explained. I hope it will be useful for you.
Understanding Vulnerability Analysis Vulnerability analysis is the process of identifying, assessing, and prioritizing the security weaknesses in a system. Vulnerability analysis is important for maintaining the confidentiality, integrity, and availability of the data and services that the system provides.</description>
      
    </item>
    
    <item>
      <title>Fuzzer Internals - Part 1: Introduction to Fuzzers</title>
      <link>https://reodus.com/posts/fuzzer-internals-part1/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://reodus.com/posts/fuzzer-internals-part1/</guid>
      
      <description>About this tutorial I decided to study Fuzzers and in this way, I wanna teach what I learn through my research. Let&amp;rsquo;s get to it.
Software Security Software security is a critical aspect of software development that focuses on safeguarding software applications from potential threats. This involves a set of practices that are integrated into the software development process to prevent unauthorized access, use, disclosure, disruption, modification, or destruction. Software security testing can be introduced at various organizations of:</description>
      
    </item>
    
  </channel>
</rss>
